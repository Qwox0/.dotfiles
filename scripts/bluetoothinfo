#!/usr/bin/env bash

# kill all subprocesses
trap 'kill $(jobs -p) 2>/dev/null' EXIT
# trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NC=$(tput op)

# color substrings `yes` and `no`
# yes - GREEN
# no - RED
color_yn() {
    local stdin="$(< /dev/stdin)"
    echo "$stdin" |
        sed "s/yes/${GREEN}yes$NC/g" |
        sed "s/no/${RED}no$NC/g"
}

remove_last_lines() {
    local count="$1"
    for _ in $(seq $count); do
        printf "\r\033[1A\033[0K"
    done
}

get_devices() {
    bluetoothctl devices | sed 's/^Device \(\S*\) \(.*\)$/\1 \2/' | while read -r item; do
        # item == "$uuid $name"
        IFS=' ' read -r uuid name <<< "$item"
        info="$(bluetoothctl info $uuid)"
        connected=$(echo "$info" | grep "Connected:" | sed 's/\s*\(.*\)/\1/')
        paired=$(echo "$info" | grep "Paired:" | sed 's/\s*\(.*\)/\1/')
        echo "$uuid | $name | $connected | $paired" | color_yn
    done
}

# main:

arg="$1"
if test -z $arg; then
    watch=false
elif [[ "$arg" =~ ^wa?t?c?h? ]]; then
    watch=true
else
    echo "Invalid argument '$1'. Usage:" 1>&2
    echo "    (no arg) -> print info once" 1>&2
    echo "    w[atch]  -> update device info ever second" 1>&2
    exit 1
fi

echo "# local controllers:"
bluetoothctl list

echo -e "\n# default local controller info:"
bluetoothctl show

bluetoothctl scan on 1>/dev/null 2>&1 &

echo -e "\n# devices: "
lines=0
while true; do
    text=$(get_devices)
    remove_last_lines $lines
    ((lines=$(wc -l <<< "$text")))
    echo "$text"
    if ! $watch; then break; fi
    sleep 1
done
