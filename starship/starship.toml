#:schema ./taplo_starship.json

format = """\
$username$hostname$os$all$character
 $directory [➜](bold green) """

add_newline = true

[line_break] # line break after $all
disabled = true # use newline in format instead

[username]
style_user = "green bold"
style_root = "red bold"
format = "[$user]($style)"
show_always = true
disabled = false

[hostname]
ssh_only = false
format = "@[$hostname]($style) "
style = "bold purple"

[character]
format = "$symbol "
#success_symbol = "[➜](bold green)"
success_symbol = "[](bold green)"
error_symbol = "[](bold red)"

# configure directory
[directory]
truncation_length = 10
truncate_to_repo = false
format = "[$path]($style)[$read_only]($read_only_style)"
read_only = " 󰌾"
read_only_style = "red"
style = "bold italic blue"

[cmd_duration]
min_time = 4
show_milliseconds = false
disabled = false

[docker_context]
symbol = " "
format = "via [$symbol$context]($style) "
style = "blue bold"
only_with_files = true
detect_files = ["docker-compose.yml", "docker-compose.yaml", "Dockerfile"]
detect_folders = []
disabled = false

[git_branch]
format = "on [$symbol$branch(:$remote_branch)]($style) "
symbol = " "
style = "bold 202"

[git_commit]
format = 'on [\( $hash$tag\)]($style) '
style = "bold 202"
only_detached = true

[git_status]
format = '([\[$conflicted$stashed$deleted$renamed$modified$untracked$staged$ahead_behind\]](bold) )'
conflicted = "[↯${count}](red bold)" # !
stashed = "[📦${count}](yellow)"
deleted = "[-${count}](red)"
renamed = "[~${count}](blue)"
modified = "[~${count}](yellow)"
untracked = "[+${count}](green)"
staged = "[/${count}](blue bold)"
ahead = "⇡${count}"
behind = "⇣${count}"

[git_state]
format = "[$state( $progress_current/$progress_total) ](bold red)"
rebase = "rebase"
merge = "merge"
revert = "revert"
cherry_pick = "🍒"
bisect = "bisect"
am = "am"
am_or_rebase = "am/rebase"

[memory_usage]
symbol = "󰍛 "

[package]
symbol = "󰏗 "
disabled = true

[os]
style = "bold blue"
disabled = false

[os.symbols]
Windows = " "
Debian = " "
Ubuntu = " " #   #

[php]
symbol = " "

[python]
#pyenv_version_name = true
format = 'via [${symbol}python (${version} )(\($virtualenv\) )]($style)'
style = "bold yellow"
pyenv_prefix = "venv "
python_binary = ["./venv/bin/python", "python", "python3", "python2"]
detect_extensions = ["py"]
version_format = "v${raw}"

[rust]
symbol = " " #  #
style = "bold 202"

[lua]
symbol = " "
