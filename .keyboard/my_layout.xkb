// ~/.keyboard/my_layout.xkb
// apply with `xkbcomp ~/.keyboard/my_layout.xkb $DISPLAY`

xkb_keymap {
xkb_keycodes {
    minimum = 8;
    maximum = 255;
    <9> = 9;
    <10> = 10;
    <11> = 11;
    <12> = 12;
    <13> = 13;
    <14> = 14;
    <15> = 15;
    <16> = 16;
    <17> = 17;
    <18> = 18;
    <19> = 19;
    <20> = 20;
    <21> = 21;
    <22> = 22;
    <23> = 23;
    <24> = 24;
    <25> = 25;
    <26> = 26;
    <27> = 27;
    <28> = 28;
    <29> = 29;
    <30> = 30;
    <31> = 31;
    <32> = 32;
    <33> = 33;
    <34> = 34;
    <35> = 35;
    <36> = 36;
    <37> = 37;
    <38> = 38;
    <39> = 39;
    <40> = 40;
    <41> = 41;
    <42> = 42;
    <43> = 43;
    <44> = 44;
    <45> = 45;
    <46> = 46;
    <47> = 47;
    <48> = 48;
    <49> = 49;
    <50> = 50;
    <51> = 51;
    <52> = 52;
    <53> = 53;
    <54> = 54;
    <55> = 55;
    <56> = 56;
    <57> = 57;
    <58> = 58;
    <59> = 59;
    <60> = 60;
    <61> = 61;
    <62> = 62;
    <63> = 63;
    <64> = 64;
    <65> = 65;
    <66> = 66;
    <67> = 67;
    <68> = 68;
    <69> = 69;
    <70> = 70;
    <71> = 71;
    <72> = 72;
    <73> = 73;
    <74> = 74;
    <75> = 75;
    <76> = 76;
    <77> = 77;
    <78> = 78;
    <79> = 79;
    <80> = 80;
    <81> = 81;
    <82> = 82;
    <83> = 83;
    <84> = 84;
    <85> = 85;
    <86> = 86;
    <87> = 87;
    <88> = 88;
    <89> = 89;
    <90> = 90;
    <91> = 91;
    <92> = 92;
    <94> = 94;
    <95> = 95;
    <96> = 96;
    <97> = 97;
    <98> = 98;
    <99> = 99;
    <100> = 100;
    <101> = 101;
    <102> = 102;
    <103> = 103;
    <104> = 104;
    <105> = 105;
    <106> = 106;
    <107> = 107;
    <108> = 108;
    <109> = 109;
    <HOME> = 110;
    <UP> = 111;
    <PGUP> = 112;
    <LEFT> = 113;
    <RGHT> = 114;
    <END> = 115;
    <DOWN> = 116;
    <PGDN> = 117;
    <INS> = 118;
    <DELE> = 119;
    <120> = 120;
    <MUTE> = 121;
    <VOL-> = 122;
    <VOL+> = 123;
    <POWR> = 124;
    <KPEQ> = 125;
    <126> = 126;
    <PAUS> = 127;
    <128> = 128;
    <129> = 129;
    <HNGL> = 130;
    <HJCV> = 131;
    <AE13> = 132;
    <LWIN> = 133;
    <RWIN> = 134;
    <COMP> = 135;
    <STOP> = 136;
    <AGAI> = 137;
    <PROP> = 138;
    <UNDO> = 139;
    <FRNT> = 140;
    <COPY> = 141;
    <OPEN> = 142;
    <PAST> = 143;
    <FIND> = 144;
    <CUT> = 145;
    <HELP> = 146;
    <147> = 147;
    <148> = 148;
    <149> = 149;
    <150> = 150;
    <151> = 151;
    <152> = 152;
    <153> = 153;
    <154> = 154;
    <155> = 155;
    <156> = 156;
    <157> = 157;
    <158> = 158;
    <159> = 159;
    <160> = 160;
    <161> = 161;
    <162> = 162;
    <163> = 163;
    <164> = 164;
    <165> = 165;
    <166> = 166;
    <167> = 167;
    <168> = 168;
    <169> = 169;
    <170> = 170;
    <171> = 171;
    <172> = 172;
    <173> = 173;
    <174> = 174;
    <175> = 175;
    <176> = 176;
    <177> = 177;
    <178> = 178;
    <179> = 179;
    <180> = 180;
    <181> = 181;
    <182> = 182;
    <183> = 183;
    <184> = 184;
    <185> = 185;
    <186> = 186;
    <187> = 187;
    <188> = 188;
    <189> = 189;
    <190> = 190;
    <FK13> = 191;
    <FK14> = 192;
    <FK15> = 193;
    <FK16> = 194;
    <FK17> = 195;
    <FK18> = 196;
    <FK19> = 197;
    <FK20> = 198;
    <FK21> = 199;
    <FK22> = 200;
    <FK23> = 201;
    <FK24> = 202;
    <MDSW> = 203;
    <ALT> = 204;
    <META> = 205;
    <SUPR> = 206;
    <HYPR> = 207;
    <208> = 208;
    <209> = 209;
    <210> = 210;
    <211> = 211;
    <212> = 212;
    <213> = 213;
    <214> = 214;
    <215> = 215;
    <216> = 216;
    <217> = 217;
    <218> = 218;
    <219> = 219;
    <220> = 220;
    <221> = 221;
    <222> = 222;
    <223> = 223;
    <224> = 224;
    <225> = 225;
    <226> = 226;
    <227> = 227;
    <228> = 228;
    <229> = 229;
    <230> = 230;
    <231> = 231;
    <232> = 232;
    <233> = 233;
    <234> = 234;
    <235> = 235;
    <236> = 236;
    <237> = 237;
    <238> = 238;
    <239> = 239;
    <240> = 240;
    <241> = 241;
    <242> = 242;
    <243> = 243;
    <244> = 244;
    <245> = 245;
    <246> = 246;
    <247> = 247;
    <248> = 248;
    <249> = 249;
    <250> = 250;
    <251> = 251;
    <252> = 252;
    <253> = 253;
    <254> = 254;
    <255> = 255;
    indicator 1 = "Caps Lock";
    indicator 2 = "Num Lock";
    indicator 3 = "Scroll Lock";
    indicator 4 = "Compose";
    indicator 5 = "Kana";
    indicator 6 = "Sleep";
    indicator 7 = "Suspend";
    indicator 8 = "Mute";
    indicator 9 = "Misc";
    indicator 10 = "Mail";
    indicator 11 = "Charging";
    virtual indicator 12 = "Shift Lock";
    virtual indicator 13 = "Group 2";
    virtual indicator 14 = "Mouse Keys";
};

xkb_types "complete" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift+NumLock;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
    type "SHIFT+ALT" {
        modifiers= Shift+Alt;
        map[Shift+Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift+Alt";
    };
    type "PC_SUPER_LEVEL2" {
        modifiers= Mod4;
        map[Mod4]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Super";
    };
    type "PC_CONTROL_LEVEL2" {
        modifiers= Control;
        map[Control]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Control";
    };
    type "PC_LCONTROL_LEVEL2" {
        modifiers= LControl;
        map[LControl]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "LControl";
    };
    type "PC_RCONTROL_LEVEL2" {
        modifiers= RControl;
        map[RControl]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "RControl";
    };
    type "PC_ALT_LEVEL2" {
        modifiers= Alt;
        map[Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt";
    };
    type "PC_LALT_LEVEL2" {
        modifiers= LAlt;
        map[LAlt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "LAlt";
    };
    type "PC_RALT_LEVEL2" {
        modifiers= RAlt;
        map[RAlt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "RAlt";
    };
    type "CTRL+ALT" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[Shift]= Level2;
        preserve[Shift]= Shift;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        preserve[Shift+LevelThree]= Shift;
        map[Control+Alt]= Level5;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "Ctrl+Alt";
    };
    type "LOCAL_EIGHT_LEVEL" {
        modifiers= Shift+Lock+Control+LevelThree;
        map[Shift+Lock]= Level1;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Control]= Level5;
        map[Shift+Lock+Control]= Level5;
        map[Shift+Control]= Level6;
        map[Lock+Control]= Level6;
        map[Control+LevelThree]= Level7;
        map[Shift+Lock+Control+LevelThree]= Level7;
        map[Shift+Control+LevelThree]= Level8;
        map[Lock+Control+LevelThree]= Level8;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Level3";
        level_name[Level4]= "Shift Level3";
        level_name[Level5]= "Ctrl";
        level_name[Level6]= "Shift Ctrl";
        level_name[Level7]= "Level3 Ctrl";
        level_name[Level8]= "Shift Level3 Ctrl";
    };
    type "THREE_LEVEL" {
        modifiers= Shift+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Level3";
    };
    type "EIGHT_LEVEL" {
        modifiers= Shift+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X Alt Base";
        level_name[Level8]= "X Shift Alt";
    };
    type "EIGHT_LEVEL_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[Lock+LevelFive]= Level6;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[Lock+LevelThree+LevelFive]= Level8;
        map[Shift+Lock+LevelThree+LevelFive]= Level7;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X Alt Base";
        level_name[Level8]= "X Shift Alt";
    };
    type "EIGHT_LEVEL_LEVEL_FIVE_LOCK" {
        modifiers= Shift+Lock+NumLock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        preserve[Shift+LevelFive]= Shift;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[NumLock]= Level5;
        map[Shift+NumLock]= Level6;
        preserve[Shift+NumLock]= Shift;
        map[NumLock+LevelThree]= Level7;
        map[Shift+NumLock+LevelThree]= Level8;
        map[Shift+NumLock+LevelFive]= Level2;
        map[NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+NumLock+LevelThree+LevelFive]= Level4;
        map[Shift+Lock]= Level2;
        map[Lock+LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level4;
        map[Lock+LevelFive]= Level5;
        map[Shift+Lock+LevelFive]= Level6;
        preserve[Shift+Lock+LevelFive]= Shift;
        map[Lock+LevelThree+LevelFive]= Level7;
        map[Shift+Lock+LevelThree+LevelFive]= Level8;
        map[Lock+NumLock]= Level5;
        map[Shift+Lock+NumLock]= Level6;
        preserve[Shift+Lock+NumLock]= Shift;
        map[Lock+NumLock+LevelThree]= Level7;
        map[Shift+Lock+NumLock+LevelThree]= Level8;
        map[Shift+Lock+NumLock+LevelFive]= Level2;
        map[Lock+NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+Lock+NumLock+LevelThree+LevelFive]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X Alt Base";
        level_name[Level8]= "X Shift Alt";
    };
    type "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK" {
        modifiers= Shift+Lock+NumLock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        preserve[Shift+LevelFive]= Shift;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[NumLock]= Level5;
        map[Shift+NumLock]= Level6;
        preserve[Shift+NumLock]= Shift;
        map[NumLock+LevelThree]= Level7;
        map[Shift+NumLock+LevelThree]= Level8;
        map[Shift+NumLock+LevelFive]= Level2;
        map[NumLock+LevelThree+LevelFive]= Level3;
        map[Shift+NumLock+LevelThree+LevelFive]= Level4;
        map[Lock]= Level2;
        map[Lock+LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level4;
        map[Lock+LevelFive]= Level5;
        map[Shift+Lock+LevelFive]= Level6;
        map[Lock+LevelThree+LevelFive]= Level7;
        map[Shift+Lock+LevelThree+LevelFive]= Level8;
        map[Lock+NumLock]= Level5;
        map[Shift+Lock+NumLock]= Level6;
        map[Lock+NumLock+LevelThree]= Level7;
        map[Shift+Lock+NumLock+LevelThree]= Level8;
        map[Lock+NumLock+LevelFive]= Level2;
        map[Lock+NumLock+LevelThree+LevelFive]= Level4;
        map[Shift+Lock+NumLock+LevelThree+LevelFive]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X Alt Base";
        level_name[Level8]= "X Shift Alt";
    };
    type "EIGHT_LEVEL_SEMIALPHABETIC" {
        modifiers= Shift+Lock+LevelThree+LevelFive;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level4;
        preserve[Shift+Lock+LevelThree]= Lock;
        map[LevelFive]= Level5;
        map[Shift+LevelFive]= Level6;
        map[Lock+LevelFive]= Level6;
        preserve[Lock+LevelFive]= Lock;
        map[Shift+Lock+LevelFive]= Level6;
        preserve[Shift+Lock+LevelFive]= Lock;
        map[LevelThree+LevelFive]= Level7;
        map[Shift+LevelThree+LevelFive]= Level8;
        map[Lock+LevelThree+LevelFive]= Level7;
        preserve[Lock+LevelThree+LevelFive]= Lock;
        map[Shift+Lock+LevelThree+LevelFive]= Level8;
        preserve[Shift+Lock+LevelThree+LevelFive]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "X";
        level_name[Level6]= "X Shift";
        level_name[Level7]= "X Alt Base";
        level_name[Level8]= "X Shift Alt";
    };
    type "FOUR_LEVEL" {
        modifiers= Shift+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "FOUR_LEVEL_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "FOUR_LEVEL_SEMIALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level4;
        preserve[Shift+Lock+LevelThree]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "FOUR_LEVEL_MIXED_KEYPAD" {
        modifiers= Shift+NumLock+LevelThree;
        map[Shift+NumLock]= Level1;
        map[NumLock]= Level2;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[NumLock+LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Shift+NumLock+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "FOUR_LEVEL_X" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[LevelThree]= Level2;
        map[Shift+LevelThree]= Level3;
        map[Control+Alt]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt Base";
        level_name[Level3]= "Shift Alt";
        level_name[Level4]= "Ctrl+Alt";
    };
    type "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level4;
        preserve[Lock]= Lock;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "AltGr Base";
        level_name[Level4]= "Shift AltGr";
    };
    type "FOUR_LEVEL_PLUS_LOCK" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock]= Level5;
        map[Shift+Lock]= Level2;
        map[Lock+LevelThree]= Level3;
        map[Shift+Lock+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "Lock";
    };
    type "FOUR_LEVEL_KEYPAD" {
        modifiers= Shift+NumLock+LevelThree;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[NumLock+LevelThree]= Level4;
        map[Shift+NumLock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Alt Number";
    };
};

xkb_compatibility "complete" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;
    interpret ISO_Level2_Latch+Exactly(Shift) {
        useModMapMods=level1;
        action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
    };
    interpret Shift_Lock+AnyOf(Shift+Lock) {
        action= LockMods(modifiers=Shift);
    };
    interpret Num_Lock+AnyOf(all) {
        virtualModifier= NumLock;
        action= LockMods(modifiers=NumLock);
    };
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelThree);
    };
    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_R+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_R+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_L+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_R+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=modMapMods);
    };
    interpret ISO_Level5_Shift+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelFive);
    };
    interpret Mode_switch+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= SetGroup(group=+1);
    };
    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelThree);
    };
    interpret ISO_Group_Latch+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LatchGroup(group=2);
    };
    interpret ISO_Next_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=+1);
    };
    interpret ISO_Prev_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=-1);
    };
    interpret ISO_First_Group+AnyOfOrNone(all) {
        action= LockGroup(group=1);
    };
    interpret ISO_Last_Group+AnyOfOrNone(all) {
        action= LockGroup(group=2);
    };
    interpret KP_1+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_End+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_2+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_Down+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_3+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_Next+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_4+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_Left+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_6+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_Right+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_7+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_Home+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_8+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_Up+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_9+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_Prior+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_5+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_Begin+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_F2+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_Divide+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_F3+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_Multiply+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_F4+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Subtract+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Separator+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_Add+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_0+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Insert+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Decimal+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret KP_Delete+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret F25+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret F26+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret F27+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret F29+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret F31+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret F33+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret F35+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret Pointer_Button_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default);
    };
    interpret Pointer_Button1+AnyOfOrNone(all) {
        action= PtrBtn(button=1);
    };
    interpret Pointer_Button2+AnyOfOrNone(all) {
        action= PtrBtn(button=2);
    };
    interpret Pointer_Button3+AnyOfOrNone(all) {
        action= PtrBtn(button=3);
    };
    interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default,count=2);
    };
    interpret Pointer_DblClick1+AnyOfOrNone(all) {
        action= PtrBtn(button=1,count=2);
    };
    interpret Pointer_DblClick2+AnyOfOrNone(all) {
        action= PtrBtn(button=2,count=2);
    };
    interpret Pointer_DblClick3+AnyOfOrNone(all) {
        action= PtrBtn(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {
        action= LockPtrBtn(button=default,affect=both);
    };
    interpret Pointer_Drag1+AnyOfOrNone(all) {
        action= LockPtrBtn(button=1,affect=both);
    };
    interpret Pointer_Drag2+AnyOfOrNone(all) {
        action= LockPtrBtn(button=2,affect=both);
    };
    interpret Pointer_Drag3+AnyOfOrNone(all) {
        action= LockPtrBtn(button=3,affect=both);
    };
    interpret Pointer_EnableKeys+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=+1);
    };
    interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=-1);
    };
    interpret AccessX_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXKeys);
    };
    interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXFeedback);
    };
    interpret RepeatKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=RepeatKeys);
    };
    interpret SlowKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=SlowKeys);
    };
    interpret BounceKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=BounceKeys);
    };
    interpret StickyKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=StickyKeys);
    };
    interpret MouseKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Overlay1_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay1);
    };
    interpret Overlay2_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay2);
    };
    interpret AudibleBell_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AudibleBell);
    };
    interpret Terminate_Server+AnyOfOrNone(all) {
        action= Terminate();
    };
    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Meta_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Meta_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Super_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Hyper_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Hyper_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret XF86Switch_VT_1+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
    interpret XF86LogGrabInfo+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86LogWindowTree+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86Next_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret XF86Prev_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret ISO_Level5_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelFive);
    };
    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;
    indicator "Caps Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Lock;
    };
    indicator "Num Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= NumLock;
    };
    indicator "Scroll Lock" {
        whichModState= locked;
        modifiers= ScrollLock;
    };
    indicator "Shift Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Shift;
    };
    indicator "Group 2" {
        !allowExplicit;
        groups= 0xfe;
    };
    indicator "Mouse Keys" {
        indicatorDrivesKeyboard;
        controls= mouseKeys;
    };
};

// key keycode { [          normal,           shift,            ralt,      shift+ralt ] };
xkb_symbols "pc+us(intl)+inet(evdev)" {

    name[group1]="English (US, intl., with dead keys)";

// unicode characters: https://en.wikipedia.org/wiki/List_of_Unicode_characters
// allowed keynames: /usr/include/X11/keysymdef.h

    key <9> { [ Escape ] };
    key <10> { [               1,          exclam,      exclamdown,     onesuperior ] };
    key <11> { [               2,              at,     twosuperior, dead_doubleacute ] };
    key <12> { [               3,      numbersign,   threesuperior,     dead_macron ] };
    key <13> { [               4,          dollar,        currency,        sterling ] };
    key <14> { [               5,         percent,        EuroSign,    dead_cedilla ] };
    key <15> { [               6,     asciicircum,      onequarter, dead_circumflex ] };
    key <16> { [               7,       ampersand,         onehalf,       dead_horn ] };
    key <17> { [               8,        asterisk,   threequarters,     dead_ogonek ] };
    key <18> { [               9,       parenleft, leftsinglequotemark,      dead_breve ] };
    key <19> { [               0,      parenright, rightsinglequotemark,  dead_abovering ] };
    key <20> { [           minus,      underscore,             yen,   dead_belowdot ] };
    key <21> { [           equal,            plus,        multiply,        division ] };
    key <22> { [       BackSpace,       BackSpace ] };
    key <23> { [             Tab,    ISO_Left_Tab ] };
    key <24> { [               q,               Q,      adiaeresis,      Adiaeresis ] };
    key <25> { [               w,               W,           aring,           Aring ] };
    key <26> { [               e,               E,          eacute,          Eacute ] };
    key <27> { [               r,               R,      registered,      registered ] };
    key <28> { [               t,               T,           thorn,           THORN ] };
    key <29> { [               y,               Y,      udiaeresis,      Udiaeresis ] };
    key <30> { [               u,               U,          uacute,          Uacute ] };
    key <31> { [               i,               I,          iacute,          Iacute ] };
    key <32> { [               o,               O,          oacute,          Oacute ] };
    key <33> { [               p,               P,      odiaeresis,      Odiaeresis ] };
    key <34> { [     bracketleft,       braceleft,   guillemotleft, leftdoublequotemark ] };
    key <35> { [    bracketright,      braceright,  guillemotright, rightdoublequotemark ] };
    key <36> { [          Return ] };
    key <37> { [       Control_L ] };
    key <38> { [               a,               A,          aacute,          Aacute ] };
    key <39> { [               s,               S,          ssharp,         section ] };
    key <40> { [               d,               D,             eth,             ETH ] };
    key <41> { [               f,               F,               f,               F ] };
    key <42> { [               g,               G,               g,               G ] };
    key <43> { [               h,               H,               h,               H ] };
    key <44> { [               j,               J,               j,               J ] };
    key <45> { [               k,               K,              oe,              OE ] };
    key <46> { [               l,               L,          oslash,          Oslash ] };
    key <47> { [       semicolon,           colon,       paragraph,          degree ] };
    key <48> { [      apostrophe,        quotedbl,      dead_acute,        quotedbl ] };
    key <49> { [           grave,      asciitilde,      dead_grave,      dead_tilde ] };
    key <50> { [         Shift_L ] };
    key <51> { [       backslash,             bar,         notsign,       brokenbar ] };
    key <52> { [               z,               Z,              ae,              AE ] };
    key <53> { [               x,               X,               x,               X ] };
    key <54> { [               c,               C,       copyright,            cent ] };
    key <55> { [               v,               V,               v,               V ] };
    key <56> { [               b,               B,               b,               B ] };
    key <57> { [               n,               N,          ntilde,          Ntilde ] };
    key <58> { [               m,               M,              mu,              mu ] };
    key <59> { [           comma,            less,        ccedilla,        Ccedilla ] };
    key <60> { [          period,         greater,   dead_abovedot,      dead_caron ] };
    key <61> { [           slash,        question,    questiondown,       dead_hook ] };
    key <62> { [         Shift_R ] };
    key <63> { type= "CTRL+ALT", [     KP_Multiply,     KP_Multiply,     KP_Multiply,     KP_Multiply,   XF86ClearGrab ] };
    key <64> { [           Alt_L,          Meta_L ] };
    key <65> { [           space ] };
    key <66> { [       Caps_Lock ] };
    key <67> { type= "CTRL+ALT", [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ] };
    key <68> { type= "CTRL+ALT", [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ] };
    key <69> { type= "CTRL+ALT", [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ] };
    key <70> { type= "CTRL+ALT", [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ] };
    key <71> { type= "CTRL+ALT", [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ] };
    key <72> { type= "CTRL+ALT", [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ] };
    key <73> { type= "CTRL+ALT", [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ] };
    key <74> { type= "CTRL+ALT", [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ] };
    key <75> { type= "CTRL+ALT", [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ] };
    key <76> { type= "CTRL+ALT", [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ] };
    key <77> { [        Num_Lock ] };
    key <78> { [     Scroll_Lock ] };
    key <79> { [         KP_Home,            KP_7 ] };
    key <80> { [           KP_Up,            KP_8 ] };
    key <81> { [        KP_Prior,            KP_9 ] };
    key <82> { type= "CTRL+ALT", [     KP_Subtract,     KP_Subtract,     KP_Subtract,     KP_Subtract,  XF86Prev_VMode ] };
    key <83> { [         KP_Left,            KP_4 ] };
    key <84> { [        KP_Begin,            KP_5 ] };
    key <85> { [        KP_Right,            KP_6 ] };
    key <86> { type= "CTRL+ALT", [          KP_Add,          KP_Add,          KP_Add,          KP_Add,  XF86Next_VMode ] };
    key <87> { [          KP_End,            KP_1 ] };
    key <88> { [         KP_Down,            KP_2 ] };
    key <89> { [         KP_Next,            KP_3 ] };
    key <90> { [       KP_Insert,            KP_0 ] };
    key <91> { [       KP_Delete,      KP_Decimal ] };
    key <92> { type= "ONE_LEVEL", [ ISO_Level3_Shift ] };
    key <94> { type= "FOUR_LEVEL", [       backslash,             bar,       backslash,             bar ] };
    key <95> { type= "CTRL+ALT", [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ] };
    key <96> { type= "CTRL+ALT", [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ] };
    key <97> { [ NoSymbol ] };
    key <98> { [        Katakana ] };
    key <99> { [        Hiragana ] };
    key <100> { [     Henkan_Mode ] };
    key <101> { [ Hiragana_Katakana ] };
    key <102> { [        Muhenkan ] };
    key <103> { [ NoSymbol ] };
    key <104> { [        KP_Enter ] };
    key <105> { [       Control_R ] };
    key <106> { type= "CTRL+ALT", [       KP_Divide,       KP_Divide,       KP_Divide,       KP_Divide,      XF86Ungrab ] };
    key <107> { type= "PC_ALT_LEVEL2", [           Print,         Sys_Req ] };
    key <108> { [ ISO_Level3_Shift ] };
    key <109> { [        Linefeed ] };
    key <HOME> { [            Home ] };
    key <UP>   { [              Up ] };
    key <PGUP> { [           Prior ] };
    key <LEFT> { [            Left ] };
    key <RGHT> { [           Right ] };
    key <END>  { [             End ] };
    key <DOWN> { [            Down ] };
    key <PGDN> { [            Next ] };
    key <INS>  { [          Insert ] };
    key <DELE> { [          Delete ] };
    key <120> { [ NoSymbol ] };
    key <MUTE> { [   XF86AudioMute ] };
    key <VOL-> { [ XF86AudioLowerVolume ] };
    key <VOL+> { [ XF86AudioRaiseVolume ] };
    key <POWR> { [    XF86PowerOff ] };
    key <KPEQ> { [        KP_Equal ] };
    key <126>  { [       plusminus ] };
    key <PAUS> { type= "PC_CONTROL_LEVEL2", [           Pause,           Break ] };
    key <128>  { [     XF86LaunchA ] };
    key <129>  { [      KP_Decimal,      KP_Decimal ] };
    key <HNGL> { [          Hangul ] };
    key <HJCV> { [    Hangul_Hanja ] };
    key <AE13> { [ NoSymbol ] };
    key <LWIN> { [         Super_L ] };
    key <RWIN> { [         Super_R ] };
    key <COMP> { [            Menu ] };
    key <STOP> { [          Cancel ] };
    key <AGAI> { [            Redo ] };
    key <PROP> { [        SunProps ] };
    key <UNDO> { [            Undo ] };
    key <FRNT> { [        SunFront ] };
    key <COPY> { [        XF86Copy ] };
    key <OPEN> { [        XF86Open ] };
    key <PAST> { [       XF86Paste ] };
    key <FIND> { [            Find ] };
    key <CUT>  { [         XF86Cut ] };
    key <HELP> { [            Help ] };
    key <147> { [      XF86MenuKB ] };
    key <148> { [  XF86Calculator ] };
    key <149> { [ NoSymbol ] };
    key <150> { [       XF86Sleep ] };
    key <151> { [      XF86WakeUp ] };
    key <152> { [    XF86Explorer ] };
    key <153> { [        XF86Send ] };
    key <154> { [ NoSymbol ] };
    key <155> { [        XF86Xfer ] };
    key <156> { [     XF86Launch1 ] };
    key <157> { [     XF86Launch2 ] };
    key <158> { [         XF86WWW ] };
    key <159> { [         XF86DOS ] };
    key <160> { [ XF86ScreenSaver ] };
    key <161> { [ XF86RotateWindows ] };
    key <162> { [    XF86TaskPane ] };
    key <163> { [        XF86Mail ] };
    key <164> { [   XF86Favorites ] };
    key <165> { [  XF86MyComputer ] };
    key <166> { [        XF86Back ] };
    key <167> { [     XF86Forward ] };
    key <168> { [ NoSymbol ] };
    key <169> { [       XF86Eject ] };
    key <170> { [       XF86Eject,       XF86Eject ] };
    key <171> { [   XF86AudioNext ] };
    key <172> { [   XF86AudioPlay,  XF86AudioPause ] };
    key <173> { [   XF86AudioPrev ] };
    key <174> { [   XF86AudioStop,       XF86Eject ] };
    key <175> { [ XF86AudioRecord ] };
    key <176> { [ XF86AudioRewind ] };
    key <177> { [       XF86Phone ] };
    key <178> { [ NoSymbol ] };
    key <179> { [       XF86Tools ] };
    key <180> { [    XF86HomePage ] };
    key <181> { [      XF86Reload ] };
    key <182> { [       XF86Close ] };
    key <183> { [ NoSymbol ] };
    key <184> { [ NoSymbol ] };
    key <185> { [    XF86ScrollUp ] };
    key <186> { [  XF86ScrollDown ] };
    key <187> { [       parenleft ] };
    key <188> { [      parenright ] };
    key <189> { [         XF86New ] };
    key <190> { [            Redo ] };
    key <FK13> { [       XF86Tools ] };
    key <FK14> { [     XF86Launch5 ] };
    key <FK15> { [     XF86Launch6 ] };
    key <FK16> { [     XF86Launch7 ] };
    key <FK17> { [     XF86Launch8 ] };
    key <FK18> { [     XF86Launch9 ] };
    key <FK19> { [ NoSymbol ] };
    key <FK20> { [ XF86AudioMicMute ] };
    key <FK21> { [ XF86TouchpadToggle ] };
    key <FK22> { [  XF86TouchpadOn ] };
    key <FK23> { [ XF86TouchpadOff ] };
    key <FK24> { [ NoSymbol ] };
    key <MDSW> { [     Mode_switch ] };
    key <ALT> { [        NoSymbol,           Alt_L ] };
    key <META> { [        NoSymbol,          Meta_L ] };
    key <SUPR> { [        NoSymbol,         Super_L ] };
    key <HYPR> { [        NoSymbol,         Hyper_L ] };
    key <208> { [   XF86AudioPlay ] };
    key <209> { [  XF86AudioPause ] };
    key <210> { [     XF86Launch3 ] };
    key <211> { [     XF86Launch4 ] };
    key <212> { [     XF86LaunchB ] };
    key <213> { [     XF86Suspend ] };
    key <214> { [       XF86Close ] };
    key <215> { [   XF86AudioPlay ] };
    key <216> { [ XF86AudioForward ] };
    key <217> { [ NoSymbol ] };
    key <218> { [           Print ] };
    key <219> { [ NoSymbol ] };
    key <220> { [      XF86WebCam ] };
    key <221> { [ XF86AudioPreset ] };
    key <222> { [ NoSymbol ] };
    key <223> { [        XF86Mail ] };
    key <224> { [   XF86Messenger ] };
    key <225> { [      XF86Search ] };
    key <226> { [          XF86Go ] };
    key <227> { [     XF86Finance ] };
    key <228> { [        XF86Game ] };
    key <229> { [        XF86Shop ] };
    key <230> { [ NoSymbol ] };
    key <231> { [          Cancel ] };
    key <232> { [ XF86MonBrightnessDown ] };
    key <233> { [ XF86MonBrightnessUp ] };
    key <234> { [  XF86AudioMedia ] };
    key <235> { [     XF86Display ] };
    key <236> { [ XF86KbdLightOnOff ] };
    key <237> { [ XF86KbdBrightnessDown ] };
    key <238> { [ XF86KbdBrightnessUp ] };
    key <239> { [        XF86Send ] };
    key <240> { [       XF86Reply ] };
    key <241> { [ XF86MailForward ] };
    key <242> { [        XF86Save ] };
    key <243> { [   XF86Documents ] };
    key <244> { [     XF86Battery ] };
    key <245> { [   XF86Bluetooth ] };
    key <246> { [        XF86WLAN ] };
    key <247> { [ NoSymbol ] };
    key <248> { [ NoSymbol ] };
    key <249> { [ NoSymbol ] };
    key <250> { [ NoSymbol ] };
    key <251> { [ XF86MonBrightnessCycle ] };
    key <252> { [ NoSymbol ] };
    key <253> { [ NoSymbol ] };
    key <254> { [        XF86WWAN ] };
    key <255> { [      XF86RFKill ] };
    modifier_map Control { <37> };
    modifier_map Shift { <50> };
    modifier_map Shift { <62> };
    modifier_map Mod1 { <64> };
    modifier_map Lock { <66> };
    modifier_map Mod2 { <77> };
    modifier_map Mod5 { <92> };
    modifier_map Control { <105> };
    modifier_map Mod4 { <LWIN> };
    modifier_map Mod4 { <RWIN> };
    modifier_map Mod5 { <MDSW> };
    modifier_map Mod1 { <META> };
    modifier_map Mod4 { <SUPR> };
    modifier_map Mod4 { <HYPR> };
};


xkb_geometry "pc(pc105)" {

    width=       470;
    height=      180;

    alias <AC00> = <66>;
    alias <AA00> = <37>;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
    description= "Generic 105";

    shape "NORM" {
        corner= 1,
        { [  18,  18 ] },
        { [   2,   1 ], [  16,  16 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  38,  18 ] },
        { [   2,   1 ], [  36,  16 ] }
    };
    shape "TABK" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "BKSL" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [   0,   0 ], [  28,   0 ], [  28,  37 ], [   5,  37 ],
          [   5,  18 ], [   0,  18 ] },
        { [   2,   1 ], [  26,   1 ], [  26,  35 ], [   7,  35 ],
          [   7,  16 ], [   2,  16 ] },
        approx= { [   5,   0 ], [  28,  37 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  33,  18 ] },
        { [   2,   1 ], [  31,  16 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  25,  18 ] },
        { [   2,   1 ], [  23,  16 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  50,  18 ] },
        { [   2,   1 ], [  48,  16 ] }
    };
    shape "MODK" {
        corner= 1,
        { [  27,  18 ] },
        { [   2,   1 ], [  25,  16 ] }
    };
    shape "SMOD" {
        corner= 1,
        { [  23,  18 ] },
        { [   2,   1 ], [  21,  16 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 113,  18 ] },
        { [   2,   1 ], [ 111,  16 ] }
    };
    shape "KP0" {
        corner= 1,
        { [  37,  18 ] },
        { [   2,   1 ], [  35,  16 ] }
    };
    shape "KPAD" {
        corner= 1,
        { [  18,  37 ] },
        { [   2,   1 ], [  16,  35 ] }
    };
    shape "LEDS" { { [  75,  20 ] } };
    shape "LED" { { [   5,   1 ] } };
    section "Function" {
        key.color= "grey20";
        priority=  7;
        top=       22;
        left=      19;
        width=     351;
        height=    19;
        row {
            top=  1;
            left= 1;
            keys {
                { <9>, "NORM",   1 },
                { <67>, "NORM",  20, color="white" },
                { <68>, "NORM",   1, color="white" },
                { <69>, "NORM",   1, color="white" },
                { <70>, "NORM",   1, color="white" },
                { <71>, "NORM",  11, color="white" },
                { <72>, "NORM",   1, color="white" },
                { <73>, "NORM",   1, color="white" },
                { <74>, "NORM",   1, color="white" },
                { <75>, "NORM",  11, color="white" },
                { <76>, "NORM",   1, color="white" },
                { <95>, "NORM",   1, color="white" },
                { <96>, "NORM",   1, color="white" },
                { <107>, "NORM",   8, color="white" },
                { <78>, "NORM",   1, color="white" },
                { <PAUS>, "NORM",   1, color="white" }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       61;
        left=      19;
        width=     287;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                { <49>, "NORM",   1 }, { <10>, "NORM",   1 },
                { <11>, "NORM",   1 }, { <12>, "NORM",   1 },
                { <13>, "NORM",   1 }, { <14>, "NORM",   1 },
                { <15>, "NORM",   1 }, { <16>, "NORM",   1 },
                { <17>, "NORM",   1 }, { <18>, "NORM",   1 },
                { <19>, "NORM",   1 }, { <20>, "NORM",   1 },
                { <21>, "NORM",   1 },
                { <22>, "BKSP",   1, color="grey20" }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                {  <23>, "TABK",   1, color="grey20" },
                { <24>, "NORM",   1 }, { <25>, "NORM",   1 },
                { <26>, "NORM",   1 }, { <27>, "NORM",   1 },
                { <28>, "NORM",   1 }, { <29>, "NORM",   1 },
                { <30>, "NORM",   1 }, { <31>, "NORM",   1 },
                { <32>, "NORM",   1 }, { <33>, "NORM",   1 },
                { <34>, "NORM",   1 }, { <35>, "NORM",   1 },
                { <36>, "RTRN",   1, color="grey20" }
            };
        };
        row {
            top=  39;
            left= 1;
            keys {
                { <66>, "CAPS",   1, color="grey20" },
                { <38>, "NORM",   1 }, { <39>, "NORM",   1 },
                { <40>, "NORM",   1 }, { <41>, "NORM",   1 },
                { <42>, "NORM",   1 }, { <43>, "NORM",   1 },
                { <44>, "NORM",   1 }, { <45>, "NORM",   1 },
                { <46>, "NORM",   1 }, { <47>, "NORM",   1 },
                { <48>, "NORM",   1 }, { <51>, "NORM",   1 }
            };
        };
        row {
            top=  58;
            left= 1;
            keys {
                { <50>, "LFSH",   1, color="grey20" },
                { <94>, "NORM",   1 }, { <52>, "NORM",   1 },
                { <53>, "NORM",   1 }, { <54>, "NORM",   1 },
                { <55>, "NORM",   1 }, { <56>, "NORM",   1 },
                { <57>, "NORM",   1 }, { <58>, "NORM",   1 },
                { <59>, "NORM",   1 }, { <60>, "NORM",   1 },
                { <61>, "NORM",   1 },
                { <62>, "RTSH",   1, color="grey20" }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                { <37>, "MODK",   1, color="grey20" },
                { <LWIN>, "SMOD",   1, color="grey20" },
                { <64>, "SMOD",   1, color="grey20" },
                { <65>, "SPCE",   1 },
                { <108>, "SMOD",   1, color="grey20" },
                { <RWIN>, "SMOD",   1, color="grey20" },
                { <COMP>, "SMOD",   1, color="grey20" },
                { <105>, "SMOD",   1, color="grey20" }
            };
        };
    }; // End of "Alpha" section

    section "Editing" {
        key.color= "grey20";
        priority=  9;
        top=       61;
        left=      312;
        width=     58;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                {  <INS>, "NORM",   1 }, { <HOME>, "NORM",   1 },
                { <PGUP>, "NORM",   1 }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                { <DELE>, "NORM",   1 }, {  <END>, "NORM",   1 },
                { <PGDN>, "NORM",   1 }
            };
        };
        row {
            top=  58;
            left= 20;
            keys {
                {   <UP>, "NORM",   1 }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                { <LEFT>, "NORM",   1 }, { <DOWN>, "NORM",   1 },
                { <RGHT>, "NORM",   1 }
            };
        };
    }; // End of "Editing" section

    section "Keypad" {
        key.color= "grey20";
        priority=  10;
        top=       61;
        left=      376;
        width=     77;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                { <77>, "NORM",   1 }, { <106>, "NORM",   1 },
                { <63>, "NORM",   1 }, { <82>, "NORM",   1 }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                {  <79>, "NORM",   1, color="white" },
                {  <80>, "NORM",   1, color="white" },
                {  <81>, "NORM",   1, color="white" },
                { <86>, "KPAD",   1 }
            };
        };
        row {
            top=  39;
            left= 1;
            keys {
                {  <83>, "NORM",   1, color="white" },
                {  <84>, "NORM",   1, color="white" },
                {  <85>, "NORM",   1, color="white" }
            };
        };
        row {
            top=  58;
            left= 1;
            keys {
                {  <87>, "NORM",   1, color="white" },
                {  <88>, "NORM",   1, color="white" },
                {  <89>, "NORM",   1, color="white" },
                { <104>, "KPAD",   1 }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                {  <90>, "KP0",   1, color="white" },
                { <91>, "NORM",   1, color="white" }
            };
        };
    }; // End of "Keypad" section

    solid "LedPanel" {
        top=      22;
        left=     377;
        priority= 0;
        color= "grey10";
        shape= "LEDS";
    };
    indicator "Num Lock" {
        top=      37;
        left=     382;
        priority= 1;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    indicator "Caps Lock" {
        top=      37;
        left=     407;
        priority= 2;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    indicator "Scroll Lock" {
        top=      37;
        left=     433;
        priority= 3;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    text "NumLockLabel" {
        top=      25;
        left=     378;
        priority= 4;
        width=  19.8;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Num\nLock";
    };
    text "CapsLockLabel" {
        top=      25;
        left=     403;
        priority= 5;
        width=  26.4;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Caps\nLock";
    };
    text "ScrollLockLabel" {
        top=      25;
        left=     428;
        priority= 6;
        width=  39.6;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Scroll\nLock";
    };
};

};
